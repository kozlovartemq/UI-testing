{"name": "test_contactus_form_send", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'msg' referenced before assignment", "trace": "self = <pages.contactus_page.ContactUsPage object at 0x03A96190>\n\n    @allure.step(\"Проверка: Сообщение об успешной отпраке появилось\")\n    def check_success_msg_appears(self) -> bool:\n        try:\n>           msg = self._is_present('xpath', ContactUsPageLocators.success_msg)\n\npages\\contactus_page.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.contactus_page.ContactUsPage object at 0x03A96190>\nfind_by = 'xpath', locator = \"//div[@id='center_column']/\"\n\n    def _is_present(self, find_by: str, locator: str) -> WebElement:\n>       return self.__wait.until(ec.presence_of_element_located((self.__get_selenium_by(find_by), locator)))\n\nbase\\seleniumbase.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"00ac2196-c836-443c-8c1d-1def32eb1ab4\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x03A508E0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n>               raise e\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"00ac2196-c836-443c-8c1d-1def32eb1ab4\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x03A508E0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"00ac2196-c836-443c-8c1d-1def32eb1ab4\")>\n\n    def _predicate(driver):\n>       return driver.find_element(*locator)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"00ac2196-c836-443c-8c1d-1def32eb1ab4\")>\nby = 'xpath', value = \"//div[@id='center_column']/\"\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            return self.find_elements(by=by, value=value)[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.TAG_NAME:\n            by = By.CSS_SELECTOR\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"00ac2196-c836-443c-8c1d-1def32eb1ab4\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//div[@id='center_column']/\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03A96028>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Given xpath expression \\\\\"//div[@id=\\'center...dsChild.jsm:240:20\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:99:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \"//div[@id='center_column']/\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression\nE       Stacktrace:\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:181:5\nE       InvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.jsm:341:5\nE       find_@chrome://remote/content/marionette/element.js:327:11\nE       element.find/</findElements<@chrome://remote/content/marionette/element.js:281:24\nE       evalFn@chrome://remote/content/marionette/sync.js:137:7\nE       PollPromise/<@chrome://remote/content/marionette/sync.js:157:5\nE       PollPromise@chrome://remote/content/marionette/sync.js:128:10\nE       element.find/<@chrome://remote/content/marionette/element.js:279:24\nE       element.find@chrome://remote/content/marionette/element.js:278:10\nE       findElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:240:20\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:99:31\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_contactus_page.TestContactUsPage object at 0x03A92580>\n\n    @pytest.mark.runthis\n    @allure.story(\"Проверка корректной отправки формы обратной связи\")\n    def test_contactus_form_send(self):\n        \"\"\"Verifying that contact us form sends successfully\"\"\"\n        contact_us = ContactUsPage(self.driver)\n        contact_us.attach_txt_file(str(Path(pathlib.Path.cwd() / 'ContactUs form.txt')))\n        contact_us.select_sh_dropdown_list_by_text(\"Customer service\")\n        contact_us.fill_email(\"hello@gmail.com\")\n        contact_us.fill_order(\"12345678\")\n        contact_us.fill_msg(\"Some message, abracadabra\")\n        contact_us.click_send_button()\n        # assert contact_us.find_text_on_page(\"Your message has been successfully sent to our team.\")\n        # print(contact_us._driver.page_source)\n>       assert contact_us.check_success_msg_appears(), 'Сообщение об успешной формы обратной связи не появилось'\n\ntests\\test_contactus_page.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.contactus_page.ContactUsPage object at 0x03A96190>\n\n    @allure.step(\"Проверка: Сообщение об успешной отпраке появилось\")\n    def check_success_msg_appears(self) -> bool:\n        try:\n            msg = self._is_present('xpath', ContactUsPageLocators.success_msg)\n        finally:\n>           if msg:\nE           UnboundLocalError: local variable 'msg' referenced before assignment\n\npages\\contactus_page.py:43: UnboundLocalError"}, "description": "Verifying that contact us form sends successfully", "steps": [{"name": "Прикрепление файла", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Artem Kozlov\\PycharmProjects\\POM_Selenium_Pytest_Task1\\ContactUs form.txt'"}], "start": 1642593734242, "stop": 1642593734312}, {"name": "Выбор \"Subject Heading\"", "status": "passed", "parameters": [{"name": "text", "value": "'Customer service'"}], "start": 1642593734313, "stop": 1642593734640}, {"name": "Заполнение email", "status": "passed", "parameters": [{"name": "email", "value": "'hello@gmail.com'"}], "start": 1642593734640, "stop": 1642593734713}, {"name": "Заполнение номера заказа", "status": "passed", "parameters": [{"name": "id_order", "value": "'12345678'"}], "start": 1642593734713, "stop": 1642593734772}, {"name": "Заполнение сообщения", "status": "passed", "parameters": [{"name": "msg", "value": "'Some message, abracadabra'"}], "start": 1642593734772, "stop": 1642593734867}, {"name": "Клик по кнопке \"Send\"", "status": "passed", "start": 1642593734868, "stop": 1642593740686}, {"name": "Проверка: Сообщение об успешной отпраке появилось", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'msg' referenced before assignment\n", "trace": "  File \"C:\\Users\\Artem Kozlov\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Artem Kozlov\\PycharmProjects\\POM_Selenium_Pytest_Task1\\pages\\contactus_page.py\", line 43, in check_success_msg_appears\n    if msg:\n"}, "start": 1642593740686, "stop": 1642593740716}], "attachments": [{"name": "Screenshot", "source": "b7958738-aa15-4af4-8fcb-05f2c05807c8-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "a9430ff6-e5e8-4b16-8d6c-74819af8978d-attachment.txt", "type": "text/plain"}], "start": 1642593722610, "stop": 1642593740826, "uuid": "62bf5636-ae71-4b08-8dbb-f30d4896a372", "historyId": "eec3f3bdb32471cd8a64ec4144811604", "testCaseId": "5eee35e243bc5160f7cb10f7b5804ad4", "fullName": "tests.test_contactus_page.TestContactUsPage#test_contactus_form_send", "labels": [{"name": "severity", "value": "normal"}, {"name": "story", "value": "Проверка корректной отправки формы обратной связи"}, {"name": "feature", "value": "Тест формы обратной связи"}, {"name": "tag", "value": "runthis"}, {"name": "tag", "value": "@pytest.mark.usefixtures('web_driver_init')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_contactus_page"}, {"name": "subSuite", "value": "TestContactUsPage"}, {"name": "host", "value": "ArtemKozlov"}, {"name": "thread", "value": "7068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_contactus_page"}]}